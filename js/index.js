// Generated by CoffeeScript 1.3.3
(function() {
  var AnimationPath, CycNum, EAST, NORTH, SOUTH, WEST, addTile, calculateRoutes, cars, carsLayer, checkDir, checkTrackPos, corner0, corner180, corner270, corner90, count, displayHeight, displayWidth, drawGrid, fullTrack, gridLayer, gridPos, guiLayer, halfTrack, height, i, intersection0, light, moveTrackStart, p, pathLayer, piece, r, rotations, stage, startButton, startPoint, startTrain, stopTrain, straight0, straight90, t, tileImages, tilePieces, tileSize, tilesLayer, trackAcceptsFromDir, trackPath, trackPathSegs, trackStart, train, width, x, y, _checkTrack, _fn, _i, _j, _len, _ref, _ref1, _ref2;

  tileSize = 50;

  width = 8;

  height = 8;

  displayHeight = tileSize * width;

  displayWidth = tileSize * height;

  trackStart = {
    x: 0,
    y: 0
  };

  tileImages = {};

  tilePieces = {};

  window.track = (function() {
    var _i, _results;
    _results = [];
    for (y = _i = 0; 0 <= height ? _i <= height : _i >= height; y = 0 <= height ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (x = _j = 0; 0 <= width ? _j <= width : _j >= width; x = 0 <= width ? ++_j : --_j) {
          _results1.push(false);
        }
        return _results1;
      })());
    }
    return _results;
  })();

  stage = new Kinetic.Stage({
    container: 'world',
    width: displayWidth + 80,
    height: displayHeight + 80
  });

  tilesLayer = new Kinetic.Layer;

  gridLayer = new Kinetic.Layer;

  pathLayer = new Kinetic.Layer;

  gridPos = function(evt) {
    return {
      x: Math.floor(evt.pageX / tileSize),
      y: Math.floor(evt.pageY / tileSize)
    };
  };

  drawGrid = function() {
    var _i, _j, _results;
    for (x = _i = 0; 0 <= displayWidth ? _i <= displayWidth : _i >= displayWidth; x = _i += tileSize) {
      gridLayer.add(new Kinetic.Line({
        points: [x - 0.5, 0, x - 0.5, displayHeight],
        stroke: "black",
        strokeWidth: 1
      }));
    }
    _results = [];
    for (y = _j = 0; 0 <= displayHeight ? _j <= displayHeight : _j >= displayHeight; y = _j += tileSize) {
      _results.push(gridLayer.add(new Kinetic.Line({
        points: [0, y - 0.5, displayWidth, y - 0.5],
        stroke: "black",
        strokeWidth: 1
      })));
    }
    return _results;
  };

  addTile = function(piece, pos) {
    var tile;
    track[pos.y][pos.x] = piece;
    tilesLayer.add(tile = new Kinetic.Image({
      image: tileImages[piece],
      x: pos.x * tileSize,
      y: pos.y * tileSize,
      width: 50,
      height: 50,
      draggable: true,
      dragBoundFunc: function(pos) {
        return {
          x: (pos.x < 0 ? 0 : pos.x),
          y: (pos.y < 0 ? 0 : pos.y)
        };
      }
    }));
    tilesLayer.draw();
    calculateRoutes();
    tile.on("dragend", function(evt) {
      var newPos;
      track[pos.y][pos.x] = false;
      newPos = gridPos(evt);
      track[newPos.y][newPos.x] = piece;
      pos = newPos;
      tile.setX(newPos.x * tileSize);
      tile.setY(newPos.y * tileSize);
      tilesLayer.draw();
      return calculateRoutes();
    });
    tile.on("mouseover", function() {
      return document.body.style.cursor = 'pointer';
    });
    return tile.on("mouseout", function() {
      return document.body.style.cursor = 'default';
    });
  };

  _ref = ["straight-0", "straight-90", "corner-0", "corner-90", "corner-180", "corner-270", "intersection-0"], straight0 = _ref[0], straight90 = _ref[1], corner0 = _ref[2], corner90 = _ref[3], corner180 = _ref[4], corner270 = _ref[5], intersection0 = _ref[6];

  _ref1 = ["north", "east", "south", "west"], NORTH = _ref1[0], EAST = _ref1[1], SOUTH = _ref1[2], WEST = _ref1[3];

  trackAcceptsFromDir = function(pos, fromDir) {
    var piece;
    piece = track[pos.y][pos.x];
    console.log("IS " + piece + " ok for " + fromDir);
    switch (fromDir) {
      case NORTH:
        return piece === straight0 || piece === corner0 || piece === corner90 || piece === intersection0;
      case SOUTH:
        return piece === straight0 || piece === corner180 || piece === corner270 || piece === intersection0;
      case EAST:
        return piece === straight90 || piece === corner90 || piece === corner180 || piece === intersection0;
      case WEST:
        return piece === straight90 || piece === corner0 || piece === corner270 || piece === intersection0;
    }
  };

  checkTrackPos = function(x, y) {
    if (track[y][x]) {
      return {
        x: x,
        y: y
      };
    }
  };

  _checkTrack = function(xd, yd, fromDir) {
    return function(pos) {
      var potentialPos;
      if (potentialPos = checkTrackPos(pos.x + xd, pos.y + yd)) {
        if (trackAcceptsFromDir(potentialPos, fromDir)) {
          return potentialPos;
        }
      }
    };
  };

  checkDir = {
    north: _checkTrack(0, -1, NORTH),
    south: _checkTrack(0, 1, SOUTH),
    east: _checkTrack(1, 0, EAST),
    west: _checkTrack(-1, 0, WEST)
  };

  fullTrack = tileSize;

  halfTrack = tileSize / 2;

  trackPath = false;

  trackPathSegs = false;

  calculateRoutes = function() {
    var col, dir, flatPath, next, path, pathPush, pos, pts, row, _i, _j, _k, _len, _len1, _len2;
    if (track[trackStart.y][trackStart.x]) {
      pos = trackStart;
    } else {
      for (y = _i = 0, _len = track.length; _i < _len; y = ++_i) {
        row = track[y];
        if (pos) {
          break;
        }
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          col = row[x];
          if (col) {
            pos = {
              x: x,
              y: y
            };
            break;
          }
        }
      }
    }
    if (!pos) {
      return;
    }
    moveTrackStart(pos);
    path = [];
    pathPush = function(points) {
      var last;
      last = path[path.length - 1];
      if (last && last[0] === points[0][0] && last[1] === points[0][1]) {
        points.shift();
      }
      return path.push.apply(path, points);
    };
    dir = (function() {
      switch (track[pos.y][pos.x]) {
        case "straight-0":
          if (checkDir.south(pos)) {
            return SOUTH;
          } else {
            return NORTH;
          }
          break;
        case "straight-90":
          if (checkDir.east(pos)) {
            return EAST;
          } else {
            return WEST;
          }
          break;
        case "corner-0":
          if (checkDir.east(pos)) {
            return NORTH;
          } else {
            return EAST;
          }
          break;
        case "corner-90":
          if (checkDir.west(pos)) {
            return NORTH;
          } else {
            return WEST;
          }
          break;
        case "corner-180":
          if (checkDir.west(pos)) {
            return SOUTH;
          } else {
            return EAST;
          }
          break;
        case "corner-270":
          if (checkDir.east(pos)) {
            return SOUTH;
          } else {
            return WEST;
          }
          break;
        case "intersection-0":
          if (checkDir.east(pos)) {
            return EAST;
          } else if (checkDir.west(pos)) {
            return WEST;
          } else if (checkDir.north(pos)) {
            return NORTH;
          } else {
            return SOUTH;
          }
      }
    })();
    next = false;
    while (true) {
      x = pos.x * fullTrack;
      y = pos.y * fullTrack;
      console.log(pos, track[pos.y][pos.x], dir);
      switch (track[pos.y][pos.x]) {
        case "straight-0":
          pts = [[x + halfTrack, y + fullTrack], [x + halfTrack, y]];
          if (dir === SOUTH) {
            pts.reverse();
          }
          break;
        case "straight-90":
          pts = [[x, y + halfTrack], [x + fullTrack, y + halfTrack]];
          if (dir === WEST) {
            pts.reverse();
          }
          break;
        case "intersection-0":
          /*
          				switch dir
          					when NORTH
          
          					when SOUTH
          
          					when EAST
          
          					when WEST
          */

          break;
        case "corner-0":
          pts = [[x + halfTrack, y + fullTrack], [x + halfTrack, y + fullTrack - (halfTrack / 2)], [x + fullTrack - (halfTrack / 2), y + halfTrack], [x + fullTrack, y + halfTrack]];
          if (dir === NORTH) {
            dir = EAST;
          } else {
            dir = SOUTH;
            pts.reverse();
          }
          break;
        case "corner-90":
          pts = [[x + halfTrack, y + fullTrack], [x + halfTrack, y + fullTrack - (halfTrack / 2)], [x + (halfTrack / 2), y + halfTrack], [x, y + halfTrack]];
          if (dir === NORTH) {
            dir = WEST;
          } else {
            dir = SOUTH;
            pts.reverse();
          }
          break;
        case "corner-180":
          pts = [[x + halfTrack, y], [x + halfTrack, y + (halfTrack / 2)], [x + (halfTrack / 2), y + halfTrack], [x, y + halfTrack]];
          if (dir === SOUTH) {
            dir = WEST;
          } else {
            dir = NORTH;
            pts.reverse();
          }
          break;
        case "corner-270":
          pts = [[x + halfTrack, y], [x + halfTrack, y + (halfTrack / 2)], [x + fullTrack - (halfTrack / 2), y + halfTrack], [x + fullTrack, y + halfTrack]];
          if (dir === SOUTH) {
            dir = EAST;
          } else {
            dir = NORTH;
            pts.reverse();
          }
      }
      pathPush(pts);
      console.log("check direction", dir);
      next = checkDir[dir](pos);
      if (!next) {
        break;
      }
      if (next.x === trackStart.x && next.y === trackStart.y) {
        break;
      }
      pos = next;
      next = false;
    }
    if (trackPath) {
      trackPath.remove();
    }
    if (path.length) {
      console.log(path);
      flatPath = [];
      for (_k = 0, _len2 = path.length; _k < _len2; _k++) {
        x = path[_k];
        flatPath.push(x[0], x[1]);
      }
      console.log(flatPath);
      pathLayer.add(trackPath = new Kinetic.Line({
        points: flatPath,
        stroke: "green",
        strokeWidth: 20,
        opacity: 0.5
      }));
      pathLayer.draw();
      return trackPathSegs = path;
    }
  };

  drawGrid();

  stage.add(pathLayer);

  stage.add(gridLayer);

  stage.add(tilesLayer);

  count = 0;

  _ref2 = {
    straight: [0, 90],
    corner: [270, 0, 90, 180],
    intersection: [0]
  };
  for (p in _ref2) {
    rotations = _ref2[p];
    _fn = function(piece, ogx, ogy) {
      var placeHolder;
      tileImages[piece] = new Image;
      tilesLayer.add(placeHolder = new Kinetic.Image({
        x: ogx,
        y: ogy,
        width: tileSize,
        height: tileSize
      }));
      tileImages[piece].onload = function() {
        placeHolder.setImage(tileImages[piece]);
        tilesLayer.add(tilePieces[piece] = placeHolder.clone());
        placeHolder.applyFilter(Kinetic.Filters.Grayscale, null, function() {
          return tilesLayer.draw();
        });
        tilePieces[piece].setDraggable(true);
        tilePieces[piece].on("dragend", function(evt) {
          tilePieces[piece].setX(ogx);
          tilePieces[piece].setY(ogy);
          return addTile(piece, gridPos(evt));
        });
        tilePieces[piece].on("mouseover", function() {
          return document.body.style.cursor = 'pointer';
        });
        return tilePieces[piece].on("mouseout", function() {
          return document.body.style.cursor = 'default';
        });
      };
      tileImages[piece].src = "images/" + piece + ".png";
      return count++;
    };
    for (_i = 0, _len = rotations.length; _i < _len; _i++) {
      r = rotations[_i];
      piece = piece = "" + p + "-" + r;
      _fn(piece, count * tileSize, height * tileSize);
    }
  }

  CycNum = {
    add: function(num, amt, min, max) {
      if (min == null) {
        min = 0;
      }
      if (max == null) {
        max = 1;
      }
      if ((num + amt) > max) {
        return min + ((num + amt) - max);
      } else {
        return num + amt;
      }
    },
    sub: function(num, amt, min, max) {
      if (min == null) {
        min = 0;
      }
      if (max == null) {
        max = 1;
      }
      if ((num - amt) < min) {
        return max - (amt - num);
      } else {
        return num - amt;
      }
    }
  };

  AnimationPath = function(pathSegs) {
    var i, pathString, seg, _j, _len1;
    this.path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    pathString = ["M" + (pathSegs[0].join(" "))];
    for (i = _j = 0, _len1 = pathSegs.length; _j < _len1; i = ++_j) {
      seg = pathSegs[i];
      if (i) {
        pathString.push("L" + (seg.join(" ")));
      }
    }
    this.path.setAttribute("d", pathString.join(" ") + "Z");
    return this.updatePath();
  };

  AnimationPath.prototype.updatePath = function() {
    return this.len = this.path.getTotalLength();
  };

  AnimationPath.prototype.pointAt = function(percent) {
    return this.path.getPointAtLength(this.len * percent);
  };

  AnimationPath.prototype.rotationAt = function(percent) {
    var p1, p2;
    p1 = this.pointAt(CycNum.sub(percent, 0.01));
    p2 = this.pointAt(CycNum.add(percent, 0.01));
    return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
  };

  AnimationPath.prototype.start = function(duration, callback, delay) {
    var startTime,
      _this = this;
    if (delay == null) {
      delay = 1 / 40;
    }
    startTime = new Date;
    return setInterval((function() {
      var elapsed, now, percent;
      now = new Date;
      elapsed = (now - startTime) / 1000;
      percent = elapsed / duration;
      if (percent >= 1) {
        percent = 1;
        startTime = now;
      }
      return callback(percent);
    }), delay * 1000);
  };

  /*
  segs = [[60, 100], [20, 200], [100, 300], [125, 305], [150, 310], [250, 250], [270, 230], [270, 175], [240, 105], [120, 30], [60, 50], [60, 100]]
  pts = []
  pts = pts.concat x for x in segs
  */


  carsLayer = new Kinetic.Layer;

  stage.add(carsLayer);

  carsLayer.add(train = new Kinetic.Rect({
    height: 25,
    offset: [5, 25 / 2],
    width: 10,
    stroke: "black",
    fill: "grey"
  }));

  carsLayer.add(light = new Kinetic.Polygon({
    points: [50, 25, 60, 25, 135, 100, -25, 100, 50, 25],
    fill: "yellow",
    stroke: "orange",
    opacity: 0.5,
    offset: [110 / 2, 10]
  }));

  cars = [train];

  for (i = _j = 0; _j <= 2; i = ++_j) {
    carsLayer.add(t = train.clone());
    cars.push(t);
  }

  startTrain = function() {
    var path, relPer;
    if (!trackPathSegs) {
      return;
    }
    path = new AnimationPath(trackPathSegs);
    relPer = (train.getHeight() + 3) / path.len;
    carsLayer.show();
    return path.start(8, function(percent) {
      var car, np, _k, _len1;
      for (i = _k = 0, _len1 = cars.length; _k < _len1; i = ++_k) {
        car = cars[i];
        np = CycNum.sub(percent, relPer * i);
        p = path.pointAt(np);
        r = path.rotationAt(np);
        car.setX(p.x);
        car.setY(p.y);
        car.setRotationDeg(r - 90);
        if (i === 0) {
          light.setX(p.x);
          light.setY(p.y);
          light.setRotationDeg(r - 90);
        }
      }
      return carsLayer.draw();
    });
  };

  stopTrain = function() {
    return carsLayer.hide();
  };

  stage.add(guiLayer = new Kinetic.Layer);

  guiLayer.add(startPoint = new Kinetic.Circle({
    radius: 10,
    fill: "green",
    stroke: "black",
    opacity: 0.9,
    draggable: true
  }));

  guiLayer.add(startButton = new Kinetic.Rect({
    x: width * tileSize + 10,
    y: 10,
    fill: "green",
    width: 25,
    height: 15
  }));

  startButton.on("click", function() {
    console.log("clicked");
    return startTrain();
  });

  startPoint.on("dragend", function(evt) {
    return moveTrackStart(gridPos(evt));
  });

  moveTrackStart = function(pos) {
    startPoint.setX((pos.x * tileSize) + (tileSize / 2));
    startPoint.setY((pos.y * tileSize) + (tileSize / 2));
    trackStart = pos;
    return guiLayer.draw();
  };

  moveTrackStart({
    x: 0,
    y: 0
  });

}).call(this);
